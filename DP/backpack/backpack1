Description
Given n items with size Ai in an integer m denotes the size of a backpack. How full you can fill this backpack?
You can not divide any item into small pieces

A
Example
Example 1:
Input:
array = [3,4,8,5]
backpack size = 10
Output:
9
Explanation:
Load 4 and 5.

Example 2:
Input:
array = [2,3,5,7]
backpack size = 12
Output:
12
Explanation:
Load 5 and 7.


class Solution {
public:
    /**
     * @param m: An integer m denotes the size of a backpack
     * @param A: Given n items with size A[i]
     * @return: The maximum size
     */
    int backPack(int m, vector<int> &A) {
        // write your code here
        vector<vector<int>> dp(A.size()+1, vector<int>(m+1, 0)); //Two-Dim dp[][] 
        for(int i=1;i<=A.size(); ++i) //loop thru 所有的items
        {
            for(int j=1; j<=m; ++j) //loop thru 重量1--m
            {
                if(j<A[i-1])  //如果剩下的重量小于item重量
                    dp[i][j] = dp[i-1][j]; //等于前一个
                else
                    dp[i][j]= max(dp[i-1][j], dp[i-1][j-A[i-1]]+A[i-1]); //选择1.不放进去用前一个值 or 2.放进去 - 前面值+item重量
            }
        }
        return dp[A.size()][m];
    }
};
